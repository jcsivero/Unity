using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class HudLevel : Hud
{
    // Start is called before the first frame update

}
public class HudWorld :Hud
{
    // Start is called before the first frame update
  
}

public class Hud : BaseMono
{
    protected CompositeData values_;
    public bool updatePending_ = true; 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Variables privadas propias de esta clase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     

 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////MÃ©todos Sobreescritos
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Eventos  de esta clase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
        /// <summary>
    /// Awake is called when the script instance is being loaded.
    /// </summary>
    override public void Awake()
    {
        base.Awake();
        SetName("Hud");      
        Debug.Log("|||||||||||||| Awake + " + GetName().ToString() +"||||||||||||||||");
        values_ = new CompositeData("Valores para este Hud");
        

    }
   override public void Start()
    {
        base.Start();
        Debug.Log("|||||||||||||| Start + " + GetName().ToString() +"||||||||||||||||");
        
         InstaciateCommands();  
        
    }    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Funciones exclusivas  de esta clase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    private void InstaciateCommands()
    {

    }    

    public CompositeData GetValues()
    {
        return values_;
    }
    public T GetValue<T>(string key)
    {
        return values_.Get<T>(key);
    }
   public void SetValue<T>(string key, T value)
    {
        values_.Set<T>(key,value);      
        updatePending_ = true;  
    }

    virtual public void UpdateHud()
    {
        
    }


}

