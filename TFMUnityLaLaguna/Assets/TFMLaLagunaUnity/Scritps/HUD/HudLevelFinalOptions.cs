using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
public class HudLevelFinalOptions : HudLevelBase
{
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Variables públicas propias de esta clase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    [SerializeField] private Text  hudTextFinal_;


 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Variables privadas propias de esta clase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Métodos Sobreescritos
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Eventos  de esta clase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
        /// <summary>
    /// Awake is called when the script instance is being loaded.
    /// </summary>
    override public  void Awake()
    {
        base.Awake();
        SetName("Hud");      
        Debug.Log("|||||||||||||| Awake + " + GetName().ToString() +"||||||||||||||||");
        InitializeValues();    ///inicializo las variables propias de esta clase en AWake, para que otros objetos puedas actualizarlas desde Start, ya que 
        ///si pongo esta inicialización en Start, puede ejecutarse depués de otros métodos start que ya hayan puesto datos.


    }
   override public void Start()
    {
        base.Start();
        Debug.Log("|||||||||||||| Start + " + GetName().ToString() +"||||||||||||||||");
        InstaciateCommands();  
        gameObject.SetActive(false);
          
        
    }    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Funciones exclusivas  de esta clase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    private void InstaciateCommands()
    {


    }    
private void InitializeValues()
    {
        SetValue<string>("HudTextFinal",hudTextFinal_.text);
        ///Creo e inicializo variables con los valores actuales del Hud, por si fueron puestos desde el inspector.
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Variables privadas propias de esta clase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
override public void UpdateHud()
    {
        if (updatePending_)
        {
            SetHudFinalText();
            updatePending_ = false;

        }
    ////Métodos virtuales para todas las clases de nivel que se hagan.
    }

public void SetHudFinalText()
    {        
        hudTextFinal_.text = GetValue<string>("HudTextfinal");
    }

     public void LoadGameMenu()
    {

            GetWorld().activeLevel_ = 0;
        
        SceneManager.LoadScene(GetWorld().activeLevel_);

    }
public void ResetLevel()
    {
        SceneManager.LoadScene(GetWorld().activeLevel_);
    }
}
